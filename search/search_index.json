{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0451\u0442\u044b","text":"<ul> <li>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161</li> </ul>"},{"location":"report_1/","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0428\u0430\u0444\u0438\u043a\u043e\u0432 \u041c\u0430\u043a\u0441\u0438\u043c \u0410\u0437\u0430\u0442\u043e\u0432\u0438\u0447 </p> <p>\u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442: \u041f\u0418\u041d (\u0418\u041a\u0422)</p> <p>\u0413\u0440\u0443\u043f\u043f\u0430: \u041a3339  </p> <p>\u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410\u043d\u0442\u043e\u043d \u0418\u0433\u043e\u0440\u0435\u0432\u0438\u0447  </p>"},{"location":"report_1/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP.  </p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u043c\u043e\u0434\u0443\u043b\u044c <code>socket</code>. \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 UDP-\u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442. \u041a\u043b\u0438\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u0451\u0442 UDP-\u0441\u043e\u043a\u0435\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u00abHello, server\u00bb \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u00abHello, client\u00bb.  </p> <p>\u041a\u043e\u0434: </p> <p>server.py:</p> <pre><code>import socket\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\nif __name__ == '__main__':\n    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    udp_socket.bind((host, port))\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\")\n\n    while True:\n        data, addr = udp_socket.recvfrom(1024)\n        message = data.decode(\"utf-8\")\n        print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 {addr}: {message}\")\n\n        reply = \"Hello, client\"\n        udp_socket.sendto(reply.encode(\"utf-8\"), addr)\n</code></pre> <p>client.py:</p> <pre><code>import socket\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\nif __name__ == '__main__':\n    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n    message = \"Hello, server\"\n    udp_socket.sendto(message.encode(\"utf-8\"), (host, port))\n\n    data, addr = udp_socket.recvfrom(1024)\n    print(f\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {data.decode('utf-8')}\")\n</code></pre>"},{"location":"report_1/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430). \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP.  </p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u0430\u0442\u0435\u0442\u044b <code>a</code> \u0438 <code>b</code>. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 <code>c = sqrt(a^2 + b^2)</code> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.  </p> <p>\u041a\u043e\u0434: </p> <p>client.py:</p> <pre><code>import socket\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\nif __name__ == \"__main__\":\n    a = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u0430\u0442\u0435\u0442 a: \")\n    b = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u0430\u0442\u0435\u0442 b: \")\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect((host, port))\n        s.sendall(f\"{a} {b}\".encode(\"utf-8\"))\n        data = s.recv(1024)\n\n    print(\"\u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:\", data.decode(\"utf-8\"))\n</code></pre> <p>server.py:</p> <pre><code>import socket\nimport math\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\nif __name__ == \"__main__\":\n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_socket.bind((host, port))\n    tcp_socket.listen(5)\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 {host}:{port} (TCP)\")\n\n    while True:\n        conn, addr = tcp_socket.accept()\n        with conn:\n            data = conn.recv(1024)\n            if not data:\n                continue\n            try:\n                a_str, b_str = data.decode(\"utf-8\").split()\n                a, b = float(a_str), float(b_str)\n                c = math.sqrt(a*a + b*b)\n                result = f\"\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 c = {c}\"\n            except Exception as e:\n                result = f\"\u041e\u0448\u0438\u0431\u043a\u0430: {e}\"\n            conn.sendall(result.encode(\"utf-8\"))\n</code></pre>"},{"location":"report_1/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e\u0442\u0434\u0430\u0451\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.  </p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0411\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d TCP-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 <code>index.html</code>. HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u0441\u0447\u0451\u0442\u0447\u0438\u043a \u043a\u043b\u0438\u043a\u043e\u0432.  </p> <p>\u041a\u043e\u0434: </p> <p>index.html:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;\u041a\u043b\u0438\u043a\u0435\u0440&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; text-align: center; margin-top: 100px; }\n        button { font-size: 20px; padding: 10px 20px; }\n        #count { font-size: 24px; margin-top: 20px; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u041a\u043b\u0438\u043a\u0438&lt;/h1&gt;\n    &lt;button id=\"btn\"&gt;\u041a\u043b\u0438\u043a&lt;/button&gt;\n    &lt;div id=\"count\"&gt;0&lt;/div&gt;\n\n    &lt;script&gt;\n        const btn = document.getElementById(\"btn\");\n        const countDiv = document.getElementById(\"count\");\n        let count = 0;\n\n        btn.addEventListener(\"click\", () =&gt; {\n            count++;\n            countDiv.textContent = count;\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>server.py:</p> <pre><code>import socket\nimport os\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\nif __name__ == \"__main__\":\n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    tcp_socket.bind((host, port))\n    tcp_socket.listen(5)\n\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{host}:{port}\")\n\n    while True:\n        conn, addr = tcp_socket.accept()\n        with conn:\n            request = conn.recv(1024).decode(\"utf-8\", errors=\"ignore\")\n            print(f\"\\n--- \u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 {addr} ---\")\n            print(request)\n\n            if os.path.exists(\"index.html\"):\n                with open(\"index.html\", \"r\", encoding=\"utf-8\") as f:\n                    body = f.read()\n                response = (\n                    \"HTTP/1.1 200 OK\\r\\n\"\n                    \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                    f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\"\n                    \"Connection: close\\r\\n\"\n                    \"\\r\\n\"\n                    f\"{body}\"\n                )\n            else:\n                body = \"&lt;h1&gt;\u0424\u0430\u0439\u043b index.html \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d&lt;/h1&gt;\"\n                response = (\n                    \"HTTP/1.1 404 Not Found\\r\\n\"\n                    \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                    f\"Content-Length: {len(body.encode('utf-8'))}\\r\\n\"\n                    \"Connection: close\\r\\n\"\n                    \"\\r\\n\"\n                    f\"{body}\"\n                )\n\n            conn.sendall(response.encode(\"utf-8\"))\n</code></pre>"},{"location":"report_1/#4","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c.  </p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 (\u0447\u0435\u0440\u0435\u0437 <code>threading</code>). \u041a\u043b\u0438\u0435\u043d\u0442 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0438\u043a (\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c). \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f.  </p> <p>\u041a\u043e\u0434: </p> <p>server.py:</p> <pre><code>import socket\nimport threading\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\nENC = \"utf-8\"\n\n# conn -&gt; nickname\nclients = {}\nclients_lock = threading.Lock()\n\n\ndef send_line(conn, text: str):\n    try:\n        conn.sendall((text + \"\\n\").encode(ENC))\n    except OSError:\n        pass\n\n\ndef broadcast(text: str, exclude=None):\n    with clients_lock:\n        dead = []\n        for c in list(clients.keys()):\n            if c is exclude:\n                continue\n            try:\n                c.sendall((text + \"\\n\").encode(ENC))\n            except OSError:\n                dead.append(c)\n        for d in dead:\n            name = clients.pop(d, None)\n            try:\n                d.close()\n            except OSError:\n                pass\n\n\ndef handle_client(conn: socket.socket, addr):\n    name = None\n    try:\n        f = conn.makefile(\"r\", encoding=ENC, newline=\"\\n\")\n\n        # \u0412\u044b\u0431\u043e\u0440 \u043d\u0438\u043a\u0430\n        while True:\n            send_line(conn, \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0438\u043a: \")\n            name_line = f.readline()\n            if not name_line:\n                return\n            candidate = name_line.strip()\n            if not candidate:\n                send_line(conn, \"\u274c \u041d\u0438\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c.\")\n                continue\n            with clients_lock:\n                if candidate in clients.values():\n                    send_line(conn, \"\u274c \u041d\u0438\u043a \u0443\u0436\u0435 \u0437\u0430\u043d\u044f\u0442. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u043e\u0439.\")\n                else:\n                    name = candidate\n                    clients[conn] = name\n                    break\n\n        send_line(conn, f\"\u2705 \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c, {name}! \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 /quit \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430.\")\n        broadcast(f\"\ud83d\udfe2 {name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.\", exclude=None)\n\n        for line in f:\n            msg = line.rstrip(\"\\n\")\n            if not msg:\n                continue\n            if msg.strip().lower() == \"/quit\":\n                send_line(conn, \"\u041f\u043e\u043a\u0430! \u0412\u044b \u0432\u044b\u0448\u043b\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430.\")\n                break\n            broadcast(f\"[{name}]: {msg}\", exclude=conn)\n\n    except Exception:\n        pass\n    finally:\n        with clients_lock:\n            if conn in clients:\n                left_name = clients.pop(conn)\n                broadcast(f\"\ud83d\udd34 {left_name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\", exclude=None)\n        try:\n            conn.close()\n        except OSError:\n            pass\n\n\ndef main():\n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    tcp_socket.bind((host, port))\n    tcp_socket.listen()\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\")\n\n    try:\n        while True:\n            conn, addr = tcp_socket.accept()\n            threading.Thread(target=handle_client, args=(conn, addr), daemon=True).start()\n    except KeyboardInterrupt:\n        print(\"\\n\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430...\")\n    finally:\n        tcp_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>client.py:</p> <pre><code>import socket\nimport threading\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\n\ndef recv_loop(sock: socket.socket):\n    \"\"\"\u0424\u043e\u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0447\u0430\u0442.\"\"\"\n    try:\n        f = sock.makefile(\"r\", encoding=\"utf-8\", newline=\"\\n\")\n        for line in f:\n            print(line.rstrip(\"\\n\"))\n    except Exception:\n        pass\n    finally:\n        try:\n            sock.close()\n        except OSError:\n            pass\n\n\ndef main():\n    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_socket.connect((host, port))\n    f = tcp_socket.makefile(\"r\", encoding=\"utf-8\", newline=\"\\n\")\n\n    # \u0412\u044b\u0431\u043e\u0440 \u043d\u0438\u043a\u0430\n    while True:\n        prompt = f.readline()\n        if not prompt:\n            print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043a\u0440\u044b\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\")\n            return\n        print(prompt.strip())\n        name = input(\"&gt; \")\n        tcp_socket.sendall((name + \"\\n\").encode(\"utf-8\"))\n        reply = f.readline()\n        if not reply:\n            print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043a\u0440\u044b\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\")\n            return\n        print(reply.strip())\n        if reply.startswith(\"\u2705\"):\n            break\n\n    t = threading.Thread(target=recv_loop, args=(tcp_socket,), daemon=True)\n    t.start()\n\n    try:\n        while True:\n            line = input()\n            if not line:\n                continue\n            tcp_socket.sendall((line + \"\\n\").encode(\"utf-8\"))\n            if line.strip().lower() == \"/quit\":\n                break\n    except KeyboardInterrupt:\n        tcp_socket.sendall((\"/quit\\n\").encode(\"utf-8\"))\n    finally:\n        try:\n            tcp_socket.close()\n        except OSError:\n            pass\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"report_1/#5","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0442\u0434\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a.  </p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d TCP-\u0441\u043e\u043a\u0435\u0442. - GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0438 \u0444\u043e\u0440\u043c\u043e\u0439 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430. - POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c (\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 + \u043e\u0446\u0435\u043d\u043a\u0430), \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c, \u0438 \u0441\u043d\u043e\u0432\u0430 \u043e\u0442\u0434\u0430\u0451\u0442 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443. - \u0414\u043b\u044f \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.  </p> <p>\u041a\u043e\u0434: </p> <p>server.py:</p> <pre><code>import socket\nimport urllib.parse\nfrom collections import defaultdict\nfrom students.k3339.Shafikov_Maxim.Lr1.config import host, port\n\n\ngrades = defaultdict(list)\n\n\ndef render_html():\n    rows = \"\"\n    if grades:\n        for subj, marks in grades.items():\n            avg = sum(marks) / len(marks)\n            marks_str = \", \".join(str(m) for m in marks)\n            rows += f\"&lt;tr&gt;&lt;td&gt;{subj}&lt;/td&gt;&lt;td&gt;{marks_str}&lt;/td&gt;&lt;td&gt;{avg:.2f}&lt;/td&gt;&lt;/tr&gt;\\n\"\n    else:\n        rows = '&lt;tr&gt;&lt;td colspan=\"3\"&gt;\u041f\u043e\u043a\u0430 \u043d\u0435\u0442 \u043e\u0446\u0435\u043d\u043e\u043a&lt;/td&gt;&lt;/tr&gt;'\n\n    return f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/title&gt;\n  &lt;style&gt;\n    body {{ font-family: Arial, sans-serif; margin: 40px; }}\n    table {{ border-collapse: collapse; width: 500px; margin-bottom: 20px; }}\n    th, td {{ border: 1px solid #333; padding: 8px; text-align: center; }}\n    th {{ background: #eee; }}\n    form {{ display: flex; flex-direction: column; width: 400px; gap: 10px; }}\n    label {{ display: flex; justify-content: space-between; }}\n    input[type=text], input[type=number] {{ flex: 1; margin-left: 10px; }}\n    input[type=submit] {{ padding: 8px; font-size: 16px; }}\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/h1&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt;&lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;/th&gt;&lt;th&gt;\u0421\u0440\u0435\u0434\u043d\u044f\u044f&lt;/th&gt;&lt;/tr&gt;\n    {rows}\n  &lt;/table&gt;\n  &lt;form method=\"POST\"&gt;\n    &lt;label&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: &lt;input type=\"text\" name=\"subject\" required&gt;&lt;/label&gt;\n    &lt;label&gt;\u041e\u0446\u0435\u043d\u043a\u0430 (1-5): &lt;input type=\"number\" name=\"grade\" min=\"1\" max=\"5\" required&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n\ndef handle_request(request: str):\n    lines = request.split(\"\\r\\n\")\n    if not lines:\n        return \"HTTP/1.1 400 Bad Request\\r\\n\\r\\n\"\n\n    first_line = lines[0]\n    method, *_ = first_line.split()\n\n    if method == \"POST\":\n        body = request.split(\"\\r\\n\\r\\n\", 1)[-1]\n        data = urllib.parse.parse_qs(body)\n        subject = data.get(\"subject\", [\"\"])[0].strip()\n        grade_str = data.get(\"grade\", [\"\"])[0].strip()\n\n        if subject and grade_str.isdigit():\n            grade = int(grade_str)\n            if 1 &lt;= grade &lt;= 5:\n                grades[subject].append(grade)\n\n    body = render_html()\n    headers = [\n        \"HTTP/1.1 200 OK\",\n        \"Content-Type: text/html; charset=utf-8\",\n        f\"Content-Length: {len(body.encode(\"utf-8\"))}\",\n        \"Connection: close\",\n        \"\",\n        \"\"\n    ]\n    return \"\\r\\n\".join(headers) + body\n\n\ndef main():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as tcp_socket:\n        tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        tcp_socket.bind((host, port))\n        tcp_socket.listen(5)\n        print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 http://{host}:{port}\")\n\n        while True:\n            conn, addr = tcp_socket.accept()\n            print(f\"[+] \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {addr[0]}:{addr[1]}\")\n            with conn:\n                request = conn.recv(4096).decode(\"utf-8\", errors=\"ignore\")\n                if not request:\n                    continue\n                response = handle_request(request)\n                conn.sendall(response.encode(\"utf-8\"))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"report_1/#_1","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21161 \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0435\u0442\u044c\u044e \u043d\u0430 Python \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>socket</code>. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b: - UDP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442 (\u043e\u0431\u043c\u0435\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438). - TCP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442 (\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f). - \u041c\u0438\u043d\u0438-\u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043e\u0442\u0434\u0430\u044e\u0449\u0438\u0439 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443. - \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438. - \u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET/POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445.  </p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430\u043c\u0438 UDP \u0438 TCP, \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.  </p>"}]}